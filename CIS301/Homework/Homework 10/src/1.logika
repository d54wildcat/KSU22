//HW 10
//1.logika

//YOU DO THIS:
//1) Read through the program to see what it does. You might try running the program with different inputs.
//2) Add the appropriate logic blocks so the assert statement will be validated (in default mode)
    //Settings->Tools->Sireum->Logika
          //Auto mode: off
          //Checker kind: Forward


//You should not change any code or the assert statement -- your only modifications should be new logic blocks.

import org.sireum.logika._

val x: Z = readInt("Enter first number: ")
val y: Z = readInt("Enter second number: ")
var min: Z = 0

if (x < y) {
    min = x
    l"""{
        1. x < y        premise
        2. min == x     premise
        3. min <= x     algebra 2
        4. min <= y     algebra 1 3
    }"""
} else {
    min = y
    l"""{
        1. !(x < y)     premise
        2. x >= y      algebra 1
        3. min == y    premise
        4. min <= x    algebra 2 3
        5. min <= y    algebra 3
    }"""
}
l"""{
    1. min <= x    premise
    2. min <= y    premise
    3. min == x V min == y    premise
    4. min <= x ^ min <= y    ^i 1 2
    5. min <= x ^ min <= y ^ (min == x V min == y)    ^i 4 3
}"""

print("Min between ", x, " and ", y, " is ", min)
assert(min <= x & min <= y & (min == x | min == y))

