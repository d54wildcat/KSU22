//HW 10
//5.logika

//YOU DO THIS:
//1) Read through the program to see what it does. You might try running the program with different inputs.
//2) Add the appropriate logic blocks so the assert statements will be validated (in default mode)
    //Settings->Tools->Sireum->Logika
          //Auto mode: off
          //Checker kind: Forward

//You should not change any code or the assert statements -- your only modifications should be new logic blocks.

import org.sireum.logika._

var numWheels: Z = readInt("Enter initial number of wheels: ")
var numBikes: Z = readInt("Enter initial number of bikes: ")
var numCars: Z = readInt("Enter initial number of cars: ")

val oldBikes: Z = numBikes
val oldCars: Z = numCars

//INVARIANT: numWheels == 2*numBikes + 4*numCars
//we will try to show that this invariant still holds after adding an additional bike or car
assume(numWheels == numBikes*2 + numCars*4)

var addVehicle: Z = readInt("Enter 1 to add a bike, and 2 to add a car: ")

if (addVehicle == 1) {
    //The user selected (1) for adding a bike!
    //Add one to the bike count, and add two to the wheel count

    numBikes = numBikes + 1
    l"""{
        1. numBikes == numBikes_old + 1                 premise
        2. oldBikes == numBikes_old                     premise
        3. addVehicle == 1                              premise
        4. numWheels == numBikes_old * 2 + numCars * 4   premise
        5. numWheels == oldBikes * 2 + numCars * 4       subst2 2 4
        6. numBikes - 1 == numBikes_old                   algebra 1
        7. numWheels == (numBikes - 1) * 2 + numCars * 4   subst2 6 4
        8. numBikes == oldBikes + 1                         subst2 2 1
        9. addVehicle != 1  | numBikes == oldBikes + 1    Vi2 8
    }"""
    numWheels = numWheels + 2
    l"""{
        1. addVehicle == 1                                              premise
        2. numWheels == numWheels_old + 2                               premise
        3. numWheels_old == oldBikes * 2 + numCars * 4                  premise
        4. numWheels_old == (numBikes - 1) * 2 + numCars * 4            premise
        5. numWheels == numBikes * 2 + numCars * 4                      algebra 2 4
        6. addVehicle != 2                                              algebra 1
        7. addVehicle != 2 | numCars == oldCars + 1                     Vi1 6
    }"""
} else {
    if (addVehicle == 2) {
        //The user selected (2) for adding a car!
        //Add one to the car count, and add four to the wheel count

        numCars = numCars + 1
        l"""{
            1. numCars == numCars_old + 1                 premise
            2. addVehicle == 2                            premise
            3. oldCars == numCars_old                     premise
            4. addVehicle != 1                            algebra 2
            5. addVehicle != 1 | numBikes == oldBikes + 1  Vi1 4
            6. numCars = oldCars + 1                      subst2 3 1
            7. addVehicle != 2 | numCars == oldCars + 1    Vi2 6
            8. numWheels == numBikes * 2 + numCars_old * 4     premise
            9. numCars - 1 == numCars_old                     algebra 1
            10. numWheels == numBikes * 2 + (numCars - 1) * 4   subst2 9 8
            11. numWheels == numBikes * 2 + oldCars * 4         subst2 3 8
        }"""
        numWheels = numWheels + 4
        l"""{
            1. numWheels = numWheels_old + 4               premise
            2. numWheels_old == numBikes * 2 + (numCars - 1) * 4  premise
            3. numWheels_old == numBikes * 2 + oldCars * 4        premise
            4. numWheels == numBikes * 2 + numCars * 4           algebra 1 2
        }"""
    } else {
        println("Error: input should be 1 or 2")
        l"""{
            1. !(addVehicle == 1)                        premise
            2. addVehicle != 1                           algebra 1
            3. addVehicle != 1 | numBikes == oldBikes + 1  Vi1 2
            4. !(addVehicle == 2)                        premise
            5. addVehicle != 2                           algebra 4
            6. addVehicle != 2 | numCars == oldCars + 1   Vi1 5
        }"""

        //invalid input -- nothing is changed
    }
    l"""{
        1. addVehicle != 1 | numBikes == oldBikes + 1  premise
        2. addVehicle != 2 | numCars == oldCars + 1    premise
        3. numWheels == numBikes * 2 + numCars * 4     premise
    }"""
}
l"""{
    1. addVehicle != 1 | numBikes == oldBikes + 1  premise
    2. addVehicle != 2 | numCars == oldCars + 1    premise
    3. numWheels == numBikes * 2 + numCars * 4     premise
}"""
//show that the invariant still holds
assert(numWheels == numBikes*2 + numCars*4)

//p->q is equivalent to !p V q (we can't use -> in assert statements)
//IF they selected to have a bike, THEN there is now one more bike
//Equivalent to: They didn't select to add a bike, OR there is now one more bike

//They didn't select to add a bike, or I now have one more bike
assert(addVehicle != 1 | numBikes == oldBikes + 1)

//They didn't select to add a car, or I now have one more car
assert(addVehicle != 2 | numCars == oldCars + 1)