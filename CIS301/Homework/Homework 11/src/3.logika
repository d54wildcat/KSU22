//HW 11
//3.logika

//Make sure Logika is in default mode
    //Settings->Tools->Sireum->Logika
          //Auto mode: off
          //Checker kind: Forward

import org.sireum.logika._

def sumToN(n: Z): Z = {
    l"""{
        requires n >= 1             //precondition
        ensures result == n*(n+1)/2 //postcondition
    }"""

    var answer: Z = 0

    if (n == 1)  {
        answer = 1
        l"""{
            1. answer == 1         premise
            2. n == 1              premise
            3. n*(n+1)/2 == 1      algebra 2
            4. 1 = n*(n+1)/2       algebra 3
            5. answer == n*(n+1)/2 algebra 4 1
        }"""
    } else {
        l"""{
            1. !(n == 1)           premise
            2. n >= 1           premise
            3. n > 1            algebra 1 2
            4. n- 1 >= 1        algebra 3
        }"""
        answer = sumToN(n-1)
        l"""{
            1. answer == (n-1)*((n-1) + 1)/2 premise
        }"""
        answer = answer + n
        l"""{
            1. answer == answer_old + n             premise
            2. answer_old == (n-1)*((n-1) + 1)/2   premise
            3. answer == (n-1)*((n-1) + 1)/2 + n   algebra 1 2
            4. answer == n*(n+1)/2                 algebra 3
        }"""
    }
    //YOU DO THIS
    //Add logic blocks to prove the postcondition
    //You'll also need a logic block before the recursive call
    //to prove its precondition
    l"""{
        1. answer == n*(n+1)/2      premise
    }"""
    return answer
}

//////////// Test code /////////////

var num: Z = 4

//YOU DO THIS
//Add a logic block to prove the precondition
l"""{
    1. num == 4     premise
    2. num >= 1     algebra 1
}"""

val sumTo4: Z = sumToN(num)
print("The sum from 1 up to 4 is ", sumTo4)

//YOU DO THIS
//Add a logic block to prove the assert
l"""{
    1. sumTo4 == num*(num + 1)/2     premise
    2. num == 4                    premise
    3. sumTo4 == 4*(4 + 1)/2        algebra 1 2
    4. sumTo4 == 10                 algebra 3
}"""

assert(sumTo4 == 10)

num = 5

//YOU DO THIS
//Add a logic block to prove the precondition
l"""{
    1. num == 5     premise
    2. num >= 1     algebra 1
}"""

val sumTo5: Z = sumToN(num)
print("The sum from 1 up to 5 is ", sumTo5)

//YOU DO THIS
//Add a logic block to prove the assert
l"""{
    1. sumTo5 == num*(num + 1)/2     premise
    2. num == 5                    premise
    3. sumTo5 == 5*(5 + 1)/2        algebra 1 2
    4. sumTo5 == 15                 algebra 3
}"""
assert(sumTo5 == 15)



